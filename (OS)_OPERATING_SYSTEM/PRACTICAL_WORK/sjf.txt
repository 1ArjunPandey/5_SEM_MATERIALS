#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Process {
 public :
    int id;
    int at;
    int bt;
    int ct;
    int wt;
    int m;
};

void sjf(Process p[], int n) {
    vector< Process* > q;
    int currTime = p[0].at;
    q.push_back(&p[0]);
    p[0].m=1;
    int comp=0;
    while(comp!=n){ 
      for(int i=0;i<n;i++){
        if(p[i].m==0 && p[i].at<=currTime){
	  p[i].m=1;
	  q.push_back(&p[i]);
	}
      }
      for(int i=0;i<q.size();i++){
        for(int j=0;j<q.size()-i-1;j++){
           if(q[j]->bt > q[j+1]->bt){
		Process * temp =q[j];
		q[j]=q[j+1];
		q[j+1]=temp;
	   }
	 }
      }	
      currTime+=q[0]->bt;
      q[0]->ct=currTime;
      cout<<q[0]->id<<endl;
      q.erase(q.begin());  
      comp++;
    } 		  
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    Process p[n];
    cout << "Enter arrival time and burst time for processes"<<endl;
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        cin >> p[i].at;
        cin >> p[i].bt;
        p[i].m=0;
    }
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
           if(p[j].at > p[j+1].at){
		Process temp =p[j];
		p[j]=p[j+1];
		p[j+1]=temp;
	   }
	 }
     }	 	
    sjf(p, n);
   cout<<"process_id"<<"\t"<<"arrival time"<<"\t"<<"burst time"<<"\t"<<"completion time"<<"\t"<<"turnaround time"<<"\t"<<"waiting time"<<endl;
    for(int i=0;i<n;i++){
     cout<<p[i].id<<"\t\t"<<p[i].at<<"\t\t"<<p[i].bt<<"\t\t"<<p[i].ct<<"\t\t"<<p[i].ct-p[i].at<<"\t\t"<<p[i].ct-p[i].at-p[i].bt<<endl;
     }
   
    return 0;
}