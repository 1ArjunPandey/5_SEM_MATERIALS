#include <iostream>
#include <vector>
using namespace std;
struct process
{
	int pid;
	int arrival_time;
	int burst_time;
	int start_time;
	int completion_time;
	int turnaround_time;
	int waiting_time;
};

int main()
{
	struct process p[100];
	int n;
	float avg_turnaround_time;
	float avg_waiting_time;
	int total_turnaround_time = 0;
	int total_waiting_time = 0;
	int burst_remaining[100];
	vector<int> is_completed(100, 0);

	cout << "enter no. of process";
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cout << "enter arrival time of the process" << i + 1 << ": ";
		cin >> p[i].arrival_time;
		cout << "enter burst time of the process" << i + 1 << ": ";
		cin >> p[i].burst_time;
		p[i].pid = i + 1;
		burst_remaining[i] = p[i].burst_time;
		cout << endl;
	}

	int current_time = 0;
	int completed = 0;

	while (completed != n)
	{
		int idx = -1;
		int mn = 100000;
		for (int i = 0; i < n; i++)
		{
			if (p[i].arrival_time <= current_time && is_completed[i] == 0)
			{
				if (burst_remaining[i] < mn)
				{
					mn = burst_remaining[i];
					idx = i;
				}
				if (burst_remaining[i] == mn)
				{
					if (p[i].arrival_time < p[idx].arrival_time)
					{
						mn = burst_remaining[i];
						idx = i;
					}
				}
			}
		}

		if (idx != -1)
		{
			burst_remaining[idx] -= 1;
			current_time += 1;
			if (burst_remaining[idx] == 0)
			{
				p[idx].completion_time = current_time;
				p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
				p[idx].waiting_time = p[idx].turnaround_time - p[idx].burst_time;

				total_turnaround_time += p[idx].turnaround_time;
				total_waiting_time += p[idx].waiting_time;

				is_completed[idx] = 1;
				completed++;
			}
		}
		else
		{
			current_time++;
		}
	}

	avg_turnaround_time = (float)total_turnaround_time / n;
	avg_waiting_time = (float)total_waiting_time / n;

	cout << endl << endl;
	cout << "#p\t" << "at\t" << "bt\t" << "ct\t" << "tat\t" << "wt\t"<<endl;

	for (int i = 0; i < n; i++)
	{
		cout << p[i].pid << "\t" << p[i].arrival_time << "\t" << p[i].burst_time << "\t" << p[i].completion_time << "\t" << p[i].turnaround_time << "\t" << p[i].waiting_time<<endl;
	}

	cout << "average turnaround time: " << avg_turnaround_time << endl;
	cout << "average waiting time: " << avg_waiting_time << endl;

}